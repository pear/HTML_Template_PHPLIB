<?php
// Call HTML_Template_PHPLIBTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'HTML_Template_PHPLIBTest::main');
}

require_once 'PHPUnit/Framework.php';

chdir(dirname(__FILE__) . '/../');
require_once 'HTML/Template/PHPLIB.php';

/**
 * Test class for HTML_Template_PHPLIB.
 * Generated by PHPUnit on 2007-07-08 at 11:59:46.
 */
class HTML_Template_PHPLIBTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('HTML_Template_PHPLIBTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
        chdir(dirname(__FILE__) . '/');
        $this->tpl = new HTML_Template_PHPLIB('templates');
        $this->assertFalse($this->tpl->getLastError());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     *
     */
    public function testSetRoot() {
        $this->tpl->setRoot(dirname(__FILE__) . '/templates');
        $this->assertTrue(
            $this->tpl->setFile('testfile', 'simple.tpl')
        );
        $this->assertFalse(
            $this->tpl->setFile('testfile', 'templates/simple.tpl')
        );

        $this->setUp();
        $this->tpl->setRoot(dirname(__FILE__));
        $this->assertTrue(
            $this->tpl->setFile('testfile', 'templates/simple.tpl')
        );
        $this->assertFalse(
            $this->tpl->setFile('testfile', 'simple.tpl')
        );
    }

    /**
     *
     */
    public function testSetUnknowns() {
        $this->tpl->setUnknowns('remove');
        $this->tpl->setFile('testfile2', 'simple2.tpl');
        $this->tpl->parse('TMP', 'testfile2');
        $this->assertEquals(
            ' ',
            $this->tpl->get('TMP')
        );

        $this->tpl->setUnknowns('keep');
        $this->tpl->setFile('testfile2', 'simple2.tpl');
        $this->tpl->parse('TMP', 'testfile2');
        $this->assertEquals(
            '{HELLO} {WORLD}',
            $this->tpl->get('TMP')
        );


        $this->tpl->setUnknowns('comment');
        $this->tpl->setFile('testfile2', 'simple2.tpl');
        $this->tpl->parse('TMP', 'testfile2');
        $this->assertNotEquals(
            '{HELLO} {WORLD}',
            $this->tpl->get('TMP')
        );
        $this->assertNotEquals(
            ' ',
            $this->tpl->get('TMP')
        );
    }

    /**
     *
     */
    public function testSetFile() {
        $this->assertTrue(
            $this->tpl->setFile('testfile', 'simple.tpl')
        );
        $this->assertFalse($this->tpl->getLastError());

        $this->assertTrue(
            $this->tpl->setFile('testfile', 'simple2.tpl')
        );
        $this->assertFalse($this->tpl->getLastError());

        $this->assertFalse(
            $this->tpl->setFile('bugfile', 'doesnotexist.tpl')
        );
        $this->assertTrue($this->tpl->getLastError() !== false);

        //multiple files
        $this->setUp();
        $this->assertTrue(
            $this->tpl->setFile(array(
                'testfile'  => 'simple.tpl',
                'testfile2' => 'simple2.tpl',
            ))
        );
        $this->assertFalse($this->tpl->getLastError());

        //multiple files, with error at last one
        $this->setUp();
        $this->assertFalse(
            $this->tpl->setFile(array(
                'testfile'  => 'simple.tpl',
                'testfile2' => 'simple2.tpl',
                'bugfile'   => 'doesnotexist.tpl'
            ))
        );
        $this->assertTrue($this->tpl->getLastError() !== false);

        //multiple files with error at first - should load others anyway
        $this->setUp();
        $this->assertFalse(
            $this->tpl->setFile(array(
                'bugfile'   => 'doesnotexist.tpl',
                'testfile'  => 'simple.tpl',
                'testfile2' => 'simple2.tpl'
            ))
        );
        $this->assertTrue($this->tpl->getLastError() !== false);
        //this checks internals..
        $this->assertEquals('templates/simple.tpl',  $this->tpl->file['testfile']);
        $this->assertEquals('templates/simple2.tpl', $this->tpl->file['testfile2']);
    }

    /**
     *
     */
    public function testSetBlock() {
        $this->tpl->setFile('testfile', 'block.tpl');
        $this->tpl->setBlock('testfile', 'hello_world', 'hello_world_ref');
        $this->tpl->parse('hello_world_ref', 'hello_world');
        $this->tpl->parse('TMP', 'testfile');
        $this->assertEquals(
            "Hello world\n",
            $this->tpl->get('TMP')
        );

        $this->tpl->parse('hello_world_ref', 'hello_world');
        $this->tpl->parse('TMP', 'testfile');
        $this->assertEquals(
            "Hello world\n",
            $this->tpl->get('TMP')
        );

        $this->tpl->parse('hello_world_ref', 'hello_world', true);
        $this->tpl->parse('TMP', 'testfile');
        $this->assertEquals(
            "Hello world\nHello world\n",
            $this->tpl->get('TMP')
        );


        //nested blocks
        $this->tpl->setFile('testfile', 'block3.tpl');
        $this->tpl->setBlock('testfile', 'hello', 'hello_ref');
        $this->tpl->setBlock('testfile', 'world', 'world_ref');
        $this->tpl->setBlock('testfile', 'hello_world', 'hello_world_ref');
        $this->tpl->parse('hello_ref', 'hello');
        $this->tpl->parse('world_ref', 'world');
        $this->tpl->parse('hello_world_ref', 'hello_world');
        $this->tpl->parse('TMP', 'testfile');
        $this->assertEquals(
            "Hello world\n",
            $this->tpl->get('TMP')
        );
    }

    /**
     *
     */
    public function testSetVar() {
        //plain
        $this->tpl->setFile('testfile', 'simple.tpl');
        $this->tpl->setVar('WORLD', 'world!');
        $this->tpl->parse('TMP', 'testfile');
        $this->assertEquals(
            'Hello world!',
            $this->tpl->get('TMP')
        );

        $this->tpl->setVar('WORLD', 'you all...');
        $this->tpl->parse('TMP', 'testfile');
        $this->assertEquals(
            'Hello you all...',
            $this->tpl->get('TMP')
        );

        //array
        $this->tpl->setFile('testfile2', 'simple2.tpl');
        $this->tpl->setVar(array(
            'HELLO' => 'Hello',
            'WORLD' => 'world!'
        ));
        $this->tpl->parse('TMP', 'testfile2');
        $this->assertEquals(
            'Hello world!',
            $this->tpl->get('TMP')
        );
    }
    
    
    
    public function testIsAbsolute()
    {
        $this->assertTrue($this->tpl->_isAbsolute('/home/user/project/template.tpl'));
        $this->assertTrue($this->tpl->_isAbsolute('C:\\Documents And Settings\\User\\template.tpl'));
        $this->assertFalse($this->tpl->_isAbsolute('templates/file.tpl'));
        $this->assertFalse($this->tpl->_isAbsolute('./templates/file.tpl'));
    }
}

// Call HTML_Template_PHPLIBTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'HTML_Template_PHPLIBTest::main') {
    HTML_Template_PHPLIBTest::main();
}
?>
